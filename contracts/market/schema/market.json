{
  "contract_name": "market",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "This struct contains required variables to instantiate a new market.",
    "type": "object",
    "required": [
      "fee",
      "first_coin",
      "second_coin"
    ],
    "properties": {
      "fee": {
        "description": "Fee deducted from each exchange in bps.",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "first_coin": {
        "description": "First coin exchanged in this market.",
        "type": "string"
      },
      "second_coin": {
        "description": "Second coin exchanged in this market.",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "This enum describes available contract's execution messages.",
    "oneOf": [
      {
        "description": "Allows to update the contract's configuration. Only owner can update.",
        "type": "object",
        "required": [
          "create_deal"
        ],
        "properties": {
          "create_deal": {
            "type": "object",
            "required": [
              "coin_out",
              "timeout"
            ],
            "properties": {
              "coin_out": {
                "description": "Coin that the user wants to receive.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Coin"
                  }
                ]
              },
              "counterparty": {
                "description": "If specified, is the only counterparty accepted in the deal.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "timeout": {
                "description": "Duration in blocks for the deal.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows to accept a deal.",
        "type": "object",
        "required": [
          "accept_deal"
        ],
        "properties": {
          "accept_deal": {
            "type": "object",
            "required": [
              "creator",
              "deal_id"
            ],
            "properties": {
              "creator": {
                "description": "Address of the deal creator.",
                "type": "string"
              },
              "deal_id": {
                "description": "Coin that the user wants to exchange for.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows to withdraw tokens associated with a deal.",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "creator",
              "deal_id"
            ],
            "properties": {
              "creator": {
                "description": "Address of the deal creator.",
                "type": "string"
              },
              "deal_id": {
                "description": "Coin that the user wants to exchange for.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "This enum describes available contract's query messages.",
    "oneOf": [
      {
        "description": "Retrieve the market configuration.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieve all deals from a creator.",
        "type": "object",
        "required": [
          "deals_by_creator"
        ],
        "properties": {
          "deals_by_creator": {
            "type": "object",
            "required": [
              "creator"
            ],
            "properties": {
              "creator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieve all available deals.",
        "type": "object",
        "required": [
          "all_deals"
        ],
        "properties": {
          "all_deals": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_deals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllDealsResponse",
      "type": "object",
      "required": [
        "deals"
      ],
      "properties": {
        "deals": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              },
              {
                "$ref": "#/definitions/Deal"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Deal": {
          "description": "Contains all information of a Deal.",
          "type": "object",
          "required": [
            "coin_in",
            "coin_out",
            "status",
            "timeout"
          ],
          "properties": {
            "coin_in": {
              "description": "Coin that the user wants to swap.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "coin_out": {
              "description": "Coin that the user wants to receive.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "counterparty": {
              "description": "Only address that can accept the deal.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "description": "Already matched by a counterparty.",
              "allOf": [
                {
                  "$ref": "#/definitions/DealStatus"
                }
              ]
            },
            "timeout": {
              "description": "Block after which the deal expire.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "DealStatus": {
          "description": "Describes the possible status of a deal.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "not_matched"
              ]
            },
            {
              "type": "object",
              "required": [
                "matched"
              ],
              "properties": {
                "matched": {
                  "$ref": "#/definitions/WithdrawStatus"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "WithdrawStatus": {
          "description": "Describes the possible status of a matched deal.",
          "oneOf": [
            {
              "description": "No one performed a withdraw.",
              "type": "string",
              "enum": [
                "no_withdraw"
              ]
            },
            {
              "description": "Only the creator performed a withdraw.",
              "type": "string",
              "enum": [
                "creator_withdrawed"
              ]
            },
            {
              "description": "Only the counterparty performed the withdraw.",
              "type": "string",
              "enum": [
                "counterparty_withdrawed"
              ]
            },
            {
              "description": "Closed deal.",
              "type": "string",
              "enum": [
                "completed"
              ]
            }
          ]
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "This struct contains configuration parameters for the contract.",
      "type": "object",
      "required": [
        "market_code_id",
        "owner"
      ],
      "properties": {
        "fee_collector": {
          "description": "Optional address used to collect markets fees.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "market_code_id": {
          "description": "Code ID of the market contract.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "description": "Contract owner",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "deals_by_creator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DealsByCreatorResponse",
      "type": "object",
      "required": [
        "deals"
      ],
      "properties": {
        "deals": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/definitions/Deal"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Deal": {
          "description": "Contains all information of a Deal.",
          "type": "object",
          "required": [
            "coin_in",
            "coin_out",
            "status",
            "timeout"
          ],
          "properties": {
            "coin_in": {
              "description": "Coin that the user wants to swap.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "coin_out": {
              "description": "Coin that the user wants to receive.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "counterparty": {
              "description": "Only address that can accept the deal.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "description": "Already matched by a counterparty.",
              "allOf": [
                {
                  "$ref": "#/definitions/DealStatus"
                }
              ]
            },
            "timeout": {
              "description": "Block after which the deal expire.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "DealStatus": {
          "description": "Describes the possible status of a deal.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "not_matched"
              ]
            },
            {
              "type": "object",
              "required": [
                "matched"
              ],
              "properties": {
                "matched": {
                  "$ref": "#/definitions/WithdrawStatus"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "WithdrawStatus": {
          "description": "Describes the possible status of a matched deal.",
          "oneOf": [
            {
              "description": "No one performed a withdraw.",
              "type": "string",
              "enum": [
                "no_withdraw"
              ]
            },
            {
              "description": "Only the creator performed a withdraw.",
              "type": "string",
              "enum": [
                "creator_withdrawed"
              ]
            },
            {
              "description": "Only the counterparty performed the withdraw.",
              "type": "string",
              "enum": [
                "counterparty_withdrawed"
              ]
            },
            {
              "description": "Closed deal.",
              "type": "string",
              "enum": [
                "completed"
              ]
            }
          ]
        }
      }
    }
  }
}
